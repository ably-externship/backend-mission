"""
Django settings for ably project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import pymysql

pymysql.install_as_MySQLdb()

DJANGO_ALLOWED_HOST = ['0.0.0.0', '127.0.0.1', 'localhost', '54.145.86.155']

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-1^d)5h@t15n-p1__y&uf7ks3qasf@f1#3qdpi2(_$wihmo$s4g'
SECRET_KEY = 'django-insecure-1^d)5h@t15n-p1__y&uf7ks3qasf@f1#3qdpi2(_$wihmo$s4g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',

    'allauth.account.auth_backends.AuthenticationBackend',
)

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# app 등록
INSTALLED_APPS += [
    # 상품 관련 app
    'contents',
    # jquery json 통신을 위한 app
    'apis',
    # 가격 자릿수 , 추가
    'django.contrib.humanize',

    # 카카오톡 소셜 로그인 관련 부분
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.kakao',

    # REST framework
    'rest_framework',
    'corsheaders',

    # 4주차
    'rest_framework_simplejwt',
]

SITE_ID = 1

LOGIN_REDIRECT_URL = '/'  # 로그인 후 리다이렉트 될 경로
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_ON_GET = True

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS 관련 추가
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS 관련 추가
CORS_ORIGIN_WHITELIST = ['http://127.0.0.1:3000', 'http://localhost:3000']
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'ably.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ably.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# mysql 연동
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ably',
        'USER': 'root',
        'PASSWORD': '1234',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 4주차
# JWT
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),  #
}

# JWT 환경 설정
REST_USE_JWT = True

from datetime import timedelta

# 추가 설정 부분

SIMPLE_JWT = {

    # 여기는 기본 세팅값

    'JWT_SECRET_KEY': SECRET_KEY,  # JWT 에 서명하는데 사용되는 시크릿키. 장고의 시크릿키가 디폴트.
    'JWT_ALGORITHM': 'HS256',  # PyJWT 에서 암호화 서명에 지원되는 알고리즘으로 마찬가지로 이것 또한 기본값.
    'JWT_VERIFY_EXPIRATION': True,  # 토큰 만료 시간 확인. 기본값 True.

    # 새로 커스텀한 옵션들

    'JWT_ALLOW_REFRESH': True,  # 토큰 새로고침 기능 활성화. 기본값 False.
    'JWT_EXPIRATION_DELTA': timedelta(hours=2),  # datetime.timedelta 의 만료 시간. 기본값 seconds=300.
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=3),  # Refresh Token의 새로 고침 시간. 기본값 days=7
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'accounts.custom_responses.my_jwt_response_handler'
    # 로그인 또는 새로 고침 후 반환되는 응답 데이터를 제어. 기본값은 {'token' : token } 인데 이건 나중에 우리가 따로 적어줄것임.
}

## mysql db model
# python manage.py makemigrations
# python manage.py inspectdb
# python manage.py migrate

## 관리자 및 유저 아이디
#  id     pw
# admin admin
# admin3 admin3
# admin4 admin4

## docker
# pip freeze > requirements.txt
# docker-compose up -d --build


## 1주차 pip list
# pip install mysqlclient
# pip install pymysql

## 2주차 pip list
# pip install social-auth-app-django (소셜 로그인을 위한 OAuth2.0 REST API 라이브러리)
# pip install django-allauth

## 3주차 pip, npm list
# pip install djangorestframework
# pip install django-cors-headers
# npm install axios

## 4주차 pip
# pip install drf-nested-routers
# pip install djangorestframework-jwt
# pip install djangorestframework-simplejwt
